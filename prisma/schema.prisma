// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id           String               @id @default(uuid())
  username     String               @unique
  passwordHash String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  //likes        Movie[]
  //Players      Players[]
  gameMovie    PlayersInMovieGame[]
  Movie        Movie[]
}

model Movie {
  id           String      @id @default(uuid())
  title        String
  overview     String
  posterPath   String?
  tasteProfile Int         @default(0)
  player       Player?     @relation(fields: [playerId], references: [id])
  playerId     String?
  movie        String?
  movieGame    MovieGame[]
}

model MovieGame {
  id            String               @id @default(uuid())
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  slug          String?              @unique
  token         String?
  game          Games?               @relation(fields: [gameId], references: [id])
  gameId        String?
  totalDislikes Int?
  totalLikes    Int?
  movieId       String
  movie         Movie                @relation(fields: [movieId], references: [id])
  //movie         Movie[]
  players       PlayersInMovieGame[]
  startedAt     DateTime?
  endedAt       DateTime?
  movieGame     MovieGame[]          @relation("MovieGameToMovieGame")
  MovieGame     MovieGame?           @relation("MovieGameToMovieGame", fields: [movieGameId], references: [id])
  movieGameId   String?
}

model Games {
  id           String               @id @default(uuid())
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  currentRound Int?
  movieGame    MovieGame[]
  players      PlayersInMovieGame[]
}

model PlayersInMovieGame {
  player      Player                     @relation(fields: [playerId], references: [id])
  playerId    String
  movieGame   MovieGame                  @relation(fields: [movieGameId], references: [id])
  movieGameId String
  isHost      Boolean
  votes       PlayersInMovieGamesVotes[]
  //score        Int
  //won          Boolean

  Games   Games?  @relation(fields: [gamesId], references: [id])
  gamesId String?
  @@id([playerId, movieGameId])
}

model PlayersInMovieGamesVotes {
  player      PlayersInMovieGame @relation(fields: [playerId, movieGameId], references: [playerId, movieGameId])
  playerId    String
  movieGameId String
  // movie       Movie              @relation(fields: [movieGameId], references: [movieGameId])
  //position    Int
  //answer      String

  @@id([playerId, movieGameId])
}

// model Players {
//   id     String  @id @default(uuid())
//   user   User?   @relation(fields: [playerId], references: [id])
//   playerId String?
//   game   Games   @relation(fields: [gameId], references: [id])
//   gameId String
// }
